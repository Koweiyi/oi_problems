#
# @lc app=leetcode.cn id=37 lang=python3
# @lcpr version=21913
#
# [37] 解数独
#
# https://leetcode.cn/problems/sudoku-solver/description/
#
# algorithms
# Hard (67.57%)
# Likes:    1700
# Dislikes: 0
# Total Accepted:    218K
# Total Submissions: 322.6K
# Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
#
# 编写一个程序，通过填充空格来解决数独问题。
# 
# 数独的解法需 遵循如下规则：
# 
# 
# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
# 
# 
# 数独部分空格内已填入了数字，空白格用 '.' 表示。
# 
# 
# 
# 
# 
# 
# 示例 1：
# 
# 输入：board =
# [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
# 
# 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
# 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
# 
# 
# 
# 
# 
# 
# 提示：
# 
# 
# board.length == 9
# board[i].length == 9
# board[i][j] 是一位数字或者 '.'
# 题目数据 保证 输入数独仅有一个解
# 
# 
# 
# 
# 
#
from typing import List
from typing import Optional
from cmath import inf
from collections import Counter
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
# @lc code=start
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        tmp = board.copy()
        row = [0] * 9 
        col = [0] * 9 
        rec = [0] * 9
        change_able = [[True] * 9 for _ in range(9)]

        for i in range(9):
            for j in range(9):
                if board[i][j] != ".":
                    change_able[i][j] = False
                    num = int(board[i][j])
                    row[i] |= 1 << num
                    col[j] |= 1 << num
                    rec[i // 3 * 3 + j // 3] |= 1 << num
                
        def dfs(id: int) -> bool:
            if id == 81:
                board = tmp.copy()
                return True
            i, j = id // 9, id % 9
            if not change_able[i][j]:
                return dfs(id + 1)
            mask = (1 << 10) - 1
            s = (row[i] ^ mask) & (col[j] ^ mask) & (rec[i // 3 * 3 + j // 3] ^ mask)
            for num in range(1, 10):
                if s & (1 << num):
                    tmp[i][j] = str(num)
                    row[i] |= (1 << num)
                    col[j] |= (1 << num)
                    rec[i // 3 * 3 + j // 3] |= (1 << num)
                    if dfs(id + 1):
                        return True
                    row[i] ^= (1 << num)
                    col[j] ^= (1 << num)
                    rec[i // 3 * 3 + j // 3] ^= (1 << num)
        dfs(0)
        return 


# @lc code=end



#
# @lcpr case=start
# [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]\n
# @lcpr case=end

#

